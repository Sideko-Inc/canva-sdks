"""Generated by Sideko (sideko.dev)"""

import io
import typing
import enum
from pydantic import (
    BaseModel as _PydanticBaseModel,
    Field as _PydanticField,
    ConfigDict as _PydanticConfigDict,
)

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class BinaryResponse:
    content: bytes
    headers: dict[str, str]

    def __init__(self, content: bytes, headers: dict[str, str]) -> None:
        self.content = content
        self.headers = headers


class GetDesignsOwnershipEnum(str, enum.Enum):
    OWNED = "OWNED"
    SHARED = "SHARED"
    ANY = "ANY"

    def __str__(self) -> str:
        return self.value


class GetDesignsSortByEnum(str, enum.Enum):
    RELEVANCE = "RELEVANCE"
    MODIFIED_DESCENDING = "MODIFIED_DESCENDING"
    MODIFIED_ASCENDING = "MODIFIED_ASCENDING"
    TITLE_DESCENDING = "TITLE_DESCENDING"
    TITLE_ASCENDING = "TITLE_ASCENDING"

    def __str__(self) -> str:
        return self.value


class TeamUser(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    display_name: typing.Optional[str] = _PydanticField(
        alias="display_name", default=None
    )
    team_id: typing.Optional[str] = _PydanticField(alias="team_id", default=None)
    user_id: typing.Optional[str] = _PydanticField(alias="user_id", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class Thumbnail(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    height: typing.Optional[int] = _PydanticField(alias="height", default=None)
    url: typing.Optional[str] = _PydanticField(alias="url", default=None)
    width: typing.Optional[str] = _PydanticField(alias="width", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class Design(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    doctype_name: typing.Optional[str] = _PydanticField(
        alias="doctype_name", default=None
    )
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    owner: typing.Optional[TeamUser] = _PydanticField(alias="owner", default=None)
    thumbnail: typing.Optional[Thumbnail] = _PydanticField(
        alias="thumbnail", default=None
    )
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetDesignsResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    continuation: typing.Optional[str] = _PydanticField(
        alias="continuation", default=None
    )
    items: typing.Optional[typing.List[Design]] = _PydanticField(
        alias="items", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)
