// Generated by Sideko (sideko.dev)
import * as fs from "fs";
import axios, {
	AxiosResponse,
	AxiosInstance,
	ResponseType,
	AxiosRequestConfig,
} from "axios";
import { stringify as QsStringify } from "qs";

import { RequestError, UnexpectedStatusError } from "./error";
import {
	TeamUser,
	Thumbnail,
	Design,
	GetDesignsResponse,
	GetDesignsOwnershipEnum,
	GetDesignsSortByEnum,
} from "./schemas";
import { ListAllDesignsRequest } from "./request_types";

export default class Client {
	public instance: AxiosInstance;
	private auth: Record<
		string,
		((axCfg: AxiosRequestConfig) => AxiosRequestConfig) | undefined
	>;

	constructor(config?: {
		bearerAuth?: string | null;
		baseUrl?: string;
		timeout?: number;
	}) {
		this.instance = axios.create({
			baseURL: config?.baseUrl ?? "https://api.canva.com/rest/v1",
			timeout: config?.timeout ?? 1000,
		});
		// register auth providers
		this.auth = {};
		this.auth["bearerAuth"] = (axCfg: AxiosRequestConfig) => {
			if (config?.bearerAuth) {
				axCfg = {
					...axCfg,
					headers: {
						...(axCfg.headers ?? {}),
						Authorization: "Bearer " + config.bearerAuth,
					},
				};
			}
			return axCfg;
		};
	}

	authedAxiosConfig(
		authNames: string[],
		axiosConfig: AxiosRequestConfig,
	): AxiosRequestConfig {
		for (const authName of authNames) {
			const provider = this.auth[authName];
			if (provider) {
				axiosConfig = provider(axiosConfig);
			}
		}

		return axiosConfig;
	}

	/**
	 */
	public async listAllDesigns(
		request: ListAllDesignsRequest,
	): Promise<GetDesignsResponse> {
		const url = `/designs`;
		const method = "GET";

		const axiosConfig = {
			validateStatus: () => true,
			method,
			url,
			params: {
				continuation: request.continuation,
				ownership: request.ownership,
				query: request.query,
				sort_by: request.sortBy,
			},
			paramsSerializer: function (params) {
				return QsStringify(params, { arrayFormat: "comma" });
			},
			headers: {},
		};

		const authedConfig = this.authedAxiosConfig(["bearerAuth"], axiosConfig);

		const response = await this.instance.request(authedConfig);

		const responseHandlers = [
			{
				isMatch: (status: number): boolean => status === 200,
				matches: "200",
				handle: (res: AxiosResponse): GetDesignsResponse => {
					return res.data as GetDesignsResponse;
				},
				isError: false,
			},
		];

		const handler = responseHandlers.find((h) => h.isMatch(response.status));
		if (!handler) {
			throw new UnexpectedStatusError({
				response,
				method,
				url,
				expectedStatuses: responseHandlers.map((h) => h.matches),
			});
		}

		const responseData = handler.handle(response);

		if (handler.isError) {
			throw new RequestError({ response, method, url });
		}

		return responseData as GetDesignsResponse;
	}
}
